// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: task.sql

package db

import (
	"context"
	"database/sql"
)

const createTask = `-- name: CreateTask :one
INSERT INTO task (
  task_id,
  list_id,
  description,
  done,
  create_at,
  update_at
) VALUES (
  $1, $2, $3, $4, $5, $6
)
RETURNING task_id, list_id, description, done, create_at, update_at
`

type CreateTaskParams struct {
	TaskID      int32          `json:"task_id"`
	ListID      sql.NullInt32  `json:"list_id"`
	Description sql.NullString `json:"description"`
	Done        sql.NullBool   `json:"done"`
	CreateAt    sql.NullTime   `json:"create_at"`
	UpdateAt    sql.NullTime   `json:"update_at"`
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, createTask,
		arg.TaskID,
		arg.ListID,
		arg.Description,
		arg.Done,
		arg.CreateAt,
		arg.UpdateAt,
	)
	var i Task
	err := row.Scan(
		&i.TaskID,
		&i.ListID,
		&i.Description,
		&i.Done,
		&i.CreateAt,
		&i.UpdateAt,
	)
	return i, err
}

const deleteTask = `-- name: DeleteTask :exec
DELETE FROM task
WHERE task_id = $1
`

func (q *Queries) DeleteTask(ctx context.Context, taskID int32) error {
	_, err := q.db.ExecContext(ctx, deleteTask, taskID)
	return err
}

const getTask = `-- name: GetTask :one
SELECT task_id, list_id, description, done, create_at, update_at FROM task
WHERE task_id = $1 LIMIT 1
`

func (q *Queries) GetTask(ctx context.Context, taskID int32) (Task, error) {
	row := q.db.QueryRowContext(ctx, getTask, taskID)
	var i Task
	err := row.Scan(
		&i.TaskID,
		&i.ListID,
		&i.Description,
		&i.Done,
		&i.CreateAt,
		&i.UpdateAt,
	)
	return i, err
}

const listTasks = `-- name: ListTasks :many
SELECT task_id, list_id, description, done, create_at, update_at FROM task
ORDER BY task_id
LIMIT $1
OFFSET $2
`

type ListTasksParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListTasks(ctx context.Context, arg ListTasksParams) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, listTasks, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.TaskID,
			&i.ListID,
			&i.Description,
			&i.Done,
			&i.CreateAt,
			&i.UpdateAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTask = `-- name: UpdateTask :one
UPDATE task
SET list_id = $2, description = $3, done = $4, update_at = $5 
WHERE task_id = $1
RETURNING task_id, list_id, description, done, create_at, update_at
`

type UpdateTaskParams struct {
	TaskID      int32          `json:"task_id"`
	ListID      sql.NullInt32  `json:"list_id"`
	Description sql.NullString `json:"description"`
	Done        sql.NullBool   `json:"done"`
	UpdateAt    sql.NullTime   `json:"update_at"`
}

func (q *Queries) UpdateTask(ctx context.Context, arg UpdateTaskParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, updateTask,
		arg.TaskID,
		arg.ListID,
		arg.Description,
		arg.Done,
		arg.UpdateAt,
	)
	var i Task
	err := row.Scan(
		&i.TaskID,
		&i.ListID,
		&i.Description,
		&i.Done,
		&i.CreateAt,
		&i.UpdateAt,
	)
	return i, err
}
