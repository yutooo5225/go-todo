// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: list.sql

package db

import (
	"context"
	"database/sql"
)

const createJob = `-- name: CreateJob :one
INSERT INTO list (
  list_id,
  list_name
) VALUES (
  $1, $2
)
RETURNING list_id, list_name
`

type CreateJobParams struct {
	ListID   int32          `json:"list_id"`
	ListName sql.NullString `json:"list_name"`
}

func (q *Queries) CreateJob(ctx context.Context, arg CreateJobParams) (List, error) {
	row := q.db.QueryRowContext(ctx, createJob, arg.ListID, arg.ListName)
	var i List
	err := row.Scan(&i.ListID, &i.ListName)
	return i, err
}

const deleteList = `-- name: DeleteList :exec
DELETE FROM list
WHERE list_id = $1
`

func (q *Queries) DeleteList(ctx context.Context, listID int32) error {
	_, err := q.db.ExecContext(ctx, deleteList, listID)
	return err
}

const getList = `-- name: GetList :one
SELECT list_id, list_name FROM list
WHERE list_id = $1 LIMIT 1
`

func (q *Queries) GetList(ctx context.Context, listID int32) (List, error) {
	row := q.db.QueryRowContext(ctx, getList, listID)
	var i List
	err := row.Scan(&i.ListID, &i.ListName)
	return i, err
}

const lists = `-- name: Lists :many
SELECT list_id, list_name FROM list
ORDER BY list_id
LIMIT $1
OFFSET $2
`

type ListsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) Lists(ctx context.Context, arg ListsParams) ([]List, error) {
	rows, err := q.db.QueryContext(ctx, lists, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []List
	for rows.Next() {
		var i List
		if err := rows.Scan(&i.ListID, &i.ListName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateList = `-- name: UpdateList :one
UPDATE list
SET list_name = $2
WHERE list_id = $1
RETURNING list_id, list_name
`

type UpdateListParams struct {
	ListID   int32          `json:"list_id"`
	ListName sql.NullString `json:"list_name"`
}

func (q *Queries) UpdateList(ctx context.Context, arg UpdateListParams) (List, error) {
	row := q.db.QueryRowContext(ctx, updateList, arg.ListID, arg.ListName)
	var i List
	err := row.Scan(&i.ListID, &i.ListName)
	return i, err
}
